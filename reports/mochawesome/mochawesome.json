{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-31T12:27:12.104Z",
    "end": "2023-12-31T12:27:13.386Z",
    "duration": 1282,
    "testsRegistered": 34,
    "passPercent": 29.411764705882355,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 24,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "ec9b058f-ab38-4d06-a804-b5209d9d646f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ca4f212f-057f-49d5-b35b-75a03b366212",
          "title": "User Registration Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/tests/001-registration-test.js",
          "file": "/api/tests/001-registration-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@register As a User, I want to be able to register",
              "fullTitle": "User Registration Endpoint @register As a User, I want to be able to register",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = faker.person.fullName();\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedRegistrationKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Toko berhasil didaftarkan');\n//take some response data and show the data\ntokoName = response.body.data.name;\n//console.log(tokoName);",
              "err": {},
              "uuid": "2dc3ad88-0ff8-411c-8c56-027b82ceddf3",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@register As a User, I should got an error message when I register with invalid data",
              "fullTitle": "User Registration Endpoint @register As a User, I should got an error message when I register with invalid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = (\"\");\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"name\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "e9ffc2e8-69ab-4539-b560-8ce09003659f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "2dc3ad88-0ff8-411c-8c56-027b82ceddf3",
            "e9ffc2e8-69ab-4539-b560-8ce09003659f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "6dcbb4af-7538-4fe0-b7d7-476e284f99b8",
          "title": "Authentication Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/tests/002-auth-test.js",
          "file": "/api/tests/002-auth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@auth As a User, I want to be able to login with valid data",
              "fullTitle": "Authentication Endpoint @auth As a User, I want to be able to login with valid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedAuthKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Authentication berhasil ditambahkan');\n//take some response data and show the data\naccessToken = response.body.data.accessToken;\n//console.log(accessToken);",
              "err": {},
              "uuid": "d928a3e7-413b-4633-a444-9f56e15fcfda",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid credential",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid credential",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "843a2fc2-b855-4ef3-a184-451045f6bc20",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid email",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"abc\");\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "31533809-ffbf-4259-a46c-3ff1c676dcfc",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid password",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "e7412e7d-0610-4f28-991b-3073c86b2d71",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with an empty email",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with an empty email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "03ae3d8b-69c5-4ea9-9e13-2e27f1816d93",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with an empty password",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with an empty password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "e57f18d3-50c6-4e67-a4c0-d1cfd87a4dfc",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "d928a3e7-413b-4633-a444-9f56e15fcfda",
            "843a2fc2-b855-4ef3-a184-451045f6bc20",
            "31533809-ffbf-4259-a46c-3ff1c676dcfc",
            "e7412e7d-0610-4f28-991b-3073c86b2d71",
            "03ae3d8b-69c5-4ea9-9e13-2e27f1816d93",
            "e57f18d3-50c6-4e67-a4c0-d1cfd87a4dfc"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "2d285289-4b10-4dd9-84cc-c2c492ca40c2",
          "title": "Users Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/tests/003-user-test.js",
          "file": "/api/tests/003-user-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users Endpoint \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAccessToken(authData);\n//console.log(response);\nassert(response.status).to.equal(201);\naccessToken = response.body.data;\n       //console.log(accessToken);",
              "err": {},
              "uuid": "9d989fc6-4206-4e45-87e1-12e84dd55667",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "@user undefined",
              "fullTitle": "Users Endpoint @user undefined",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUser);\nassert(response.status).to.equal(201);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\", \"message\"]);\nassert(response.body.data).to.be.an('object');\nuserId = response.body.data;",
              "err": {},
              "uuid": "d7b30077-cc82-4fa5-b38f-b4fc2ce084a2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I want to get all users",
              "fullTitle": "Users Endpoint @user As a User, I want to get all users",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAllUser(accessToken.accessToken);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "9b7b6405-473e-4ac9-b1f3-923e5a9c817a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I want to get users by user id",
              "fullTitle": "Users Endpoint @user As a User, I want to get users by user id",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId.userId);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "a53bf557-2618-47aa-8d58-a7e23b83a713",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I want to add new user with valid data",
              "fullTitle": "Users Endpoint @user As a User, I want to add new user with valid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUser);\nassert(response.status).to.equal(201);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\", \"message\"]);\nassert(response.body.data).to.be.an('object');\nuserId = response.body.data;",
              "err": {},
              "uuid": "08ef2e3d-6103-4083-a322-1f4d68ea57a6",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I want to update my data with valid data",
              "fullTitle": "Users Endpoint @user As a User, I want to update my data with valid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.name = faker.person.firstName();\nuserData.email = faker.internet.email();\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"message\", \"data\"]);\nassert(response.body.data).to.be.an('object');\n//console.log(response.body);",
              "err": {},
              "uuid": "37196ddf-0e2f-4969-9b1f-4ef41f8f3040",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken + '1', newUser);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "c2421ea2-5663-4887-88de-bbc528e3315b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUserInvalidEmail);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "1dcfbe72-7e7b-431a-950f-7eb28cee6b71",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "newUser.email = (\"\");\nconst response = await addUser(accessToken.accessToken, newUser);\n//console.log(response);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "8b3f2727-478c-4924-8148-868f24eac085",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I add new user with empty password",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with empty password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUserEmptyPassword);\n//console.log(response);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "bd6a47fb-82a1-4321-9bd9-15349046492b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I get user with invalid token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with invalid token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken + '1', userId.userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "b1929fa5-9a42-48b4-a925-10ec5c9c1cbe",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I get user with empty token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with empty token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById('', userId.userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Bad HTTP authentication header format');",
              "err": {},
              "uuid": "73663113-1029-401e-b31c-77355d4cb472",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I get user with invalid user id",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with invalid user id",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId.userId + '1');\nassert(response.status).to.equal(404);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('id tidak valid');",
              "err": {},
              "uuid": "901b84f6-abc9-4f23-a0eb-4445731a2cc0",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with empty email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with empty email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.email = (\"\");\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"email\" is not allowed to be empty');",
              "err": {},
              "uuid": "81213cad-afeb-4942-8f6e-3ab470008fdd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.email = (\"aaa\");\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"email\" must be a valid email');",
              "err": {},
              "uuid": "2f3aa483-179a-4513-a2f0-cd92faf3d208",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with empty name",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with empty name",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.name = (\"\");\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"name\" is not allowed to be empty');",
              "err": {},
              "uuid": "5c5bfc49-6c61-4241-9107-22ba05b1132c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a System, I want to delete a user",
              "fullTitle": "Users Endpoint @user As a System, I want to delete a user",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await deleteUser(accessToken.accessToken, userId.userId);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"message\"]);\nassert(response.body.message).to.equal('User berhasil dihapus')",
              "err": {},
              "uuid": "e677e1f9-30bf-4e43-b005-ecb37803f645",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "d7b30077-cc82-4fa5-b38f-b4fc2ce084a2",
            "9b7b6405-473e-4ac9-b1f3-923e5a9c817a",
            "a53bf557-2618-47aa-8d58-a7e23b83a713",
            "08ef2e3d-6103-4083-a322-1f4d68ea57a6",
            "37196ddf-0e2f-4969-9b1f-4ef41f8f3040",
            "c2421ea2-5663-4887-88de-bbc528e3315b",
            "1dcfbe72-7e7b-431a-950f-7eb28cee6b71",
            "8b3f2727-478c-4924-8148-868f24eac085",
            "bd6a47fb-82a1-4321-9bd9-15349046492b",
            "b1929fa5-9a42-48b4-a925-10ec5c9c1cbe",
            "73663113-1029-401e-b31c-77355d4cb472",
            "901b84f6-abc9-4f23-a0eb-4445731a2cc0",
            "81213cad-afeb-4942-8f6e-3ab470008fdd",
            "2f3aa483-179a-4513-a2f0-cd92faf3d208",
            "5c5bfc49-6c61-4241-9107-22ba05b1132c",
            "e677e1f9-30bf-4e43-b005-ecb37803f645"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "87d27b8a-956a-4b2c-966d-effed827f663",
          "title": "Units Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/tests/004-unit-test.js",
          "file": "/api/tests/004-unit-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Units Endpoint\"",
              "fullTitle": "Units Endpoint \"before all\" hook in \"Units Endpoint\"",
              "timedOut": false,
              "duration": 513,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAccessToken(authData);\n//console.log(response);\nassert(response.status).to.equal(201);\naccessToken = response.body.data;\n//console.log(accessToken);",
              "err": {},
              "uuid": "89b88ef5-8138-4d9a-a30f-a0b54abf0e7f",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "@unit As a User, I want to create a new unit with valid data",
              "fullTitle": "Units Endpoint @unit As a User, I want to create a new unit with valid data",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await addUnit(accessToken.accessToken, unitData);\n//console.log(response.body.data);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"status\", \"message\", \"data\"]);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Unit berhasil ditambahkan');\n//take some response data and show the data\nunitId = response.body.data.unitId;\n//console.log(unitId);",
              "err": {},
              "uuid": "14744e6a-55f8-4382-8f1e-9aea8682c75e",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I want to get all units",
              "fullTitle": "Units Endpoint @unit As a User, I want to get all units",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getUnits(accessToken.accessToken);\nassert(response.status).to.equal(200);\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "8004c2f9-1b83-4ca9-b2a6-1d13f94edecc",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I want to get a unit by id",
              "fullTitle": "Units Endpoint @unit As a User, I want to get a unit by id",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getUnitById(accessToken.accessToken, unitId);\n//console.log(response.body.data);\nassert(response.status).to.equal(200);\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "f16c6d25-f9ec-470a-b5f9-562f9fe9a46d",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I want to update a unit with valid data",
              "fullTitle": "Units Endpoint @unit As a User, I want to update a unit with valid data",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nunitData.name = faker.word.noun();\nconst response = await updateUnit(accessToken.accessToken, unitId, unitData);\nassert(response.status).to.equal(200);\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "5e9e390b-4f16-460b-a304-0d0853cdf964",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I want to delete a unit",
              "fullTitle": "Units Endpoint @unit As a User, I want to delete a unit",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await deleteUnit(accessToken.accessToken, unitId);\nassert(response.status).to.equal(200);\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "f4023a9e-37d2-4b4f-8a08-e825f2465c49",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I should got an error when trying to create a new unit with invalid token",
              "fullTitle": "Units Endpoint @unit As a User, I should got an error when trying to create a new unit with invalid token",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await addUnit(accessToken.accessToken + '1', unitData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"statusCode\", \"error\", \"message\", \"attributes\"]);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "6cd34cf7-1951-44bb-90b3-7441837476fd",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I should got an error when trying to create a new with empty name",
              "fullTitle": "Units Endpoint @unit As a User, I should got an error when trying to create a new with empty name",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await addUnit(accessToken.accessToken, emptyNameUnitData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"status\", \"message\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('name is required, description is optional');",
              "err": {},
              "uuid": "285ed72e-442e-4d4e-85c6-21245de08f03",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I should got an error when trying to get all units with invalid token",
              "fullTitle": "Units Endpoint @unit As a User, I should got an error when trying to get all units with invalid token",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getUnits(accessToken.accessToken + '1');\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"statusCode\", \"error\", \"message\", \"attributes\"]);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "00d79f5c-e750-4274-9bf7-c6731dc56112",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I should got an error when trying to get an unit with invalid unit id",
              "fullTitle": "Units Endpoint @unit As a User, I should got an error when trying to get an unit with invalid unit id",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getUnitById(accessToken.accessToken, unitId + '1');\n// console.log(response);\nassert(response.status).to.equal(404);\nassert(response.body).to.have.keys([\"status\", \"message\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('id tidak valid');",
              "err": {},
              "uuid": "6c3b473c-8022-4fb4-a755-d92abcd7219d",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I should got an error when trying to update an unit with invalid unit id",
              "fullTitle": "Units Endpoint @unit As a User, I should got an error when trying to update an unit with invalid unit id",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await updateUnit(accessToken.accessToken, unitId + 'X', unitData);\nassert(response.status).to.equal(404);\nassert(response.body).to.have.keys([\"status\", \"message\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('id tidak valid');",
              "err": {},
              "uuid": "793100c8-95f8-46ec-8f23-86751c1450ae",
              "parentUUID": "87d27b8a-956a-4b2c-966d-effed827f663",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14744e6a-55f8-4382-8f1e-9aea8682c75e",
            "8004c2f9-1b83-4ca9-b2a6-1d13f94edecc",
            "f16c6d25-f9ec-470a-b5f9-562f9fe9a46d",
            "5e9e390b-4f16-460b-a304-0d0853cdf964",
            "f4023a9e-37d2-4b4f-8a08-e825f2465c49",
            "6cd34cf7-1951-44bb-90b3-7441837476fd",
            "285ed72e-442e-4d4e-85c6-21245de08f03",
            "00d79f5c-e750-4274-9bf7-c6731dc56112",
            "6c3b473c-8022-4fb4-a755-d92abcd7219d",
            "793100c8-95f8-46ec-8f23-86751c1450ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 752,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "6.2.0"
    }
  }
}