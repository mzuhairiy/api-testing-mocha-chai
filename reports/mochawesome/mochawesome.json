{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2023-12-27T13:48:51.952Z",
    "end": "2023-12-27T13:48:52.514Z",
    "duration": 562,
    "testsRegistered": 9,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 8,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "58ff9429-962c-4622-b1b3-edfa0adb1b08",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2998606c-2360-49fe-b831-3484a940ceb8",
          "title": "User registration",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/001-registration-test.js",
          "file": "/api/test/001-registration-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@post As a User, I want to be able to register",
              "fullTitle": "User registration @post As a User, I want to be able to register",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = faker.person.fullName();\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedRegistrationKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Toko berhasil didaftarkan');\n//take some response data and show the data\ntokoName = response.body.data.name;\n//console.log(tokoName);",
              "err": {},
              "uuid": "8b8cd414-c0bf-4617-a8b1-7134b7995368",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@post As a User, I should got an error message when I register with invalid data",
              "fullTitle": "User registration @post As a User, I should got an error message when I register with invalid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = (\"\");\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"name\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "2966f2f1-c632-4ad5-b928-16f814ab0cae",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "8b8cd414-c0bf-4617-a8b1-7134b7995368",
            "2966f2f1-c632-4ad5-b928-16f814ab0cae"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "1102da6e-d150-46d1-bb96-f575849d70d7",
          "title": "User login",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/002-auth-test.js",
          "file": "/api/test/002-auth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@post As a User, I want to be able to login with valid data",
              "fullTitle": "User login @post As a User, I want to be able to login with valid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedAuthKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Authentication berhasil ditambahkan');\n//take some response data and show the data\naccessToken = response.body.data.accessToken;\n//console.log(accessToken);",
              "err": {},
              "uuid": "234e91a8-4df4-48fa-ac74-4d7b4993c203",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@post As a User, I should got an error message when I login with invalid credential",
              "fullTitle": "User login @post As a User, I should got an error message when I login with invalid credential",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "cb58e618-4385-4945-9b43-db20fad45f71",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@post As a User, I should got an error message when I login with invalid email",
              "fullTitle": "User login @post As a User, I should got an error message when I login with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"abc\");\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "ba48026b-afe1-465e-ae52-1444b5b7256d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@post As a User, I should got an error message when I login with invalid password",
              "fullTitle": "User login @post As a User, I should got an error message when I login with invalid password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "330c3d8b-e814-4243-a298-8f37ab19e69f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@post As a User, I should got an error message when I login with an empty email",
              "fullTitle": "User login @post As a User, I should got an error message when I login with an empty email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "281c1ddf-07c6-4e8f-8c59-cd9e9dd97c64",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@post As a User, I should got an error message when I login with an empty password",
              "fullTitle": "User login @post As a User, I should got an error message when I login with an empty password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "2f82cb75-fc31-47c2-b99f-510fd1c3f5d9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "234e91a8-4df4-48fa-ac74-4d7b4993c203",
            "cb58e618-4385-4945-9b43-db20fad45f71",
            "ba48026b-afe1-465e-ae52-1444b5b7256d",
            "330c3d8b-e814-4243-a298-8f37ab19e69f",
            "281c1ddf-07c6-4e8f-8c59-cd9e9dd97c64",
            "2f82cb75-fc31-47c2-b99f-510fd1c3f5d9"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "42646801-dca2-459c-addf-6e5b0ed36864",
          "title": "Get Users",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/003-get-user-test.js",
          "file": "/api/test/003-get-user-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get Users\"",
              "fullTitle": "Get Users \"before all\" hook in \"Get Users\"",
              "timedOut": false,
              "duration": 458,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAccessToken(authData);\nassert(response.status).to.equal(201);\n//console.log(response.body);\naccessToken = response.body.data;\nconsole.log(accessToken);",
              "err": {},
              "uuid": "7a4def8c-873a-4b41-8cbc-26cbb9e957a7",
              "parentUUID": "42646801-dca2-459c-addf-6e5b0ed36864",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "@get As a User, I want to get all users with valid data",
              "fullTitle": "Get Users @get As a User, I want to get all users with valid data",
              "timedOut": false,
              "duration": 101,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await getAllUser(accessToken.accessToken);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');\nassert(response.body.data[0]).to.be.an('array');",
              "err": {
                "message": "AssertionError: expected undefined to be an array",
                "estack": "AssertionError: expected undefined to be an array\n    at Context.<anonymous> (api/test/003-get-user-test.js:37:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b0edbdd3-be15-41dc-954e-3eb1a3dd7ad5",
              "parentUUID": "42646801-dca2-459c-addf-6e5b0ed36864",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b0edbdd3-be15-41dc-954e-3eb1a3dd7ad5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "6.2.0"
    }
  }
}