{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-31T07:25:25.227Z",
    "end": "2023-12-31T07:25:26.053Z",
    "duration": 826,
    "testsRegistered": 29,
    "passPercent": 17.24137931034483,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 24,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "263492f8-1eca-430c-9f39-17ea285c9a10",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8b78f032-9f99-4840-8345-cff716e51075",
          "title": "User Registration Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/tests/001-registration-test.js",
          "file": "/api/tests/001-registration-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@register As a User, I want to be able to register",
              "fullTitle": "User Registration Endpoint @register As a User, I want to be able to register",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = faker.person.fullName();\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedRegistrationKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Toko berhasil didaftarkan');\n//take some response data and show the data\ntokoName = response.body.data.name;\n//console.log(tokoName);",
              "err": {},
              "uuid": "3b6be50c-9858-48b8-a6af-109dbbf29ced",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@register As a User, I should got an error message when I register with invalid data",
              "fullTitle": "User Registration Endpoint @register As a User, I should got an error message when I register with invalid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = (\"\");\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"name\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "cd42079d-580c-4c17-8dff-90f477271c6c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "3b6be50c-9858-48b8-a6af-109dbbf29ced",
            "cd42079d-580c-4c17-8dff-90f477271c6c"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "d0f78aa8-fb54-427f-879b-7f1fff7e2fe6",
          "title": "Authentication Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/tests/002-auth-test.js",
          "file": "/api/tests/002-auth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@auth As a User, I want to be able to login with valid data",
              "fullTitle": "Authentication Endpoint @auth As a User, I want to be able to login with valid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedAuthKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Authentication berhasil ditambahkan');\n//take some response data and show the data\naccessToken = response.body.data.accessToken;\n//console.log(accessToken);",
              "err": {},
              "uuid": "c306d6a7-564d-44e2-a56d-5e99f73ddf4a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid credential",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid credential",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "6f4fdec6-504c-40cc-afae-0ee817104824",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid email",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"abc\");\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "88960f61-384d-404d-93a1-d5cda4f02372",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid password",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "fcfd4c20-aa30-49b5-a16d-01a16ea5ba8b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with an empty email",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with an empty email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "16f8738f-f9f3-4ce9-a5f4-c2e6e3280976",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with an empty password",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with an empty password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "2c90822e-4078-45fa-b67c-51556417c3d6",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c306d6a7-564d-44e2-a56d-5e99f73ddf4a",
            "6f4fdec6-504c-40cc-afae-0ee817104824",
            "88960f61-384d-404d-93a1-d5cda4f02372",
            "fcfd4c20-aa30-49b5-a16d-01a16ea5ba8b",
            "16f8738f-f9f3-4ce9-a5f4-c2e6e3280976",
            "2c90822e-4078-45fa-b67c-51556417c3d6"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "cba0c693-7739-4ff2-87b7-2cbec59944cf",
          "title": "Users Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/tests/003-user-test.js",
          "file": "/api/tests/003-user-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users Endpoint \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAccessToken(authData);\n//console.log(response);\nassert(response.status).to.equal(201);\naccessToken = response.body.data;\n       //console.log(accessToken);",
              "err": {},
              "uuid": "56835e96-779f-49af-ad0d-91e9c08344dd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "@user undefined",
              "fullTitle": "Users Endpoint @user undefined",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUser);\nassert(response.status).to.equal(201);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\", \"message\"]);\nassert(response.body.data).to.be.an('object');\nuserId = response.body.data;",
              "err": {},
              "uuid": "7b467d18-8c89-4fdf-a9a1-9b98fa0c67ea",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I want to get all users",
              "fullTitle": "Users Endpoint @user As a User, I want to get all users",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAllUser(accessToken.accessToken);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "cdf8a20b-dba4-4022-b408-e296e5fcb54e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I want to get users by user id",
              "fullTitle": "Users Endpoint @user As a User, I want to get users by user id",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId.userId);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "d1458593-fb01-4a4e-9be7-a48cea2fe4b7",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I want to add new user with valid data",
              "fullTitle": "Users Endpoint @user As a User, I want to add new user with valid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUser);\nassert(response.status).to.equal(201);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\", \"message\"]);\nassert(response.body.data).to.be.an('object');\nuserId = response.body.data;",
              "err": {},
              "uuid": "c4ac98e1-c54f-4bab-83b3-61ec0c8e041a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I want to update my data with valid data",
              "fullTitle": "Users Endpoint @user As a User, I want to update my data with valid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.name = faker.person.firstName();\nuserData.email = faker.internet.email();\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"message\", \"data\"]);\nassert(response.body.data).to.be.an('object');\n//console.log(response.body);",
              "err": {},
              "uuid": "321fbad2-5410-42b3-809e-483891fdc8e4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken + '1', newUser);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "ed603df1-7dfa-4a4b-95f2-79ee502d36c3",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUserInvalidEmail);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "fcc3266d-7322-4291-9ff2-c5153500f4ed",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "newUser.email = (\"\");\nconst response = await addUser(accessToken.accessToken, newUser);\n//console.log(response);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "0c08fbae-d0cd-43a8-960c-8b3703a8d455",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I add new user with empty password",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with empty password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUserEmptyPassword);\n//console.log(response);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "a37b7e09-f91c-42aa-9e79-47a36a8b3947",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I get user with invalid token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with invalid token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken + '1', userId.userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "f61cd9fc-aad0-40e6-a706-d70034310b17",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I get user with empty token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with empty token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById('', userId.userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Bad HTTP authentication header format');",
              "err": {},
              "uuid": "32a70c55-dca1-42e0-ace7-eebed999db03",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I get user with invalid user id",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with invalid user id",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId.userId + '1');\nassert(response.status).to.equal(404);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('id tidak valid');",
              "err": {},
              "uuid": "a7506d5c-f936-49e1-bb22-105e7f4c6123",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with empty email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with empty email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.email = (\"\");\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"email\" is not allowed to be empty');",
              "err": {},
              "uuid": "ffee9e71-bd4b-426b-9f4c-64304ded2a83",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.email = (\"aaa\");\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"email\" must be a valid email');",
              "err": {},
              "uuid": "a0e58814-9b84-46ad-93bb-293b9329ff3f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with empty name",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with empty name",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.name = (\"\");\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"name\" is not allowed to be empty');",
              "err": {},
              "uuid": "13a52f48-6389-4e04-8cc6-4d8a5ceb65ec",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@user As a System, I want to delete a user",
              "fullTitle": "Users Endpoint @user As a System, I want to delete a user",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await deleteUser(accessToken.accessToken, userId.userId);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"message\"]);\nassert(response.body.message).to.equal('User berhasil dihapus')",
              "err": {},
              "uuid": "95f4b720-d36d-40b8-a22b-e6ceebc0c299",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "7b467d18-8c89-4fdf-a9a1-9b98fa0c67ea",
            "cdf8a20b-dba4-4022-b408-e296e5fcb54e",
            "d1458593-fb01-4a4e-9be7-a48cea2fe4b7",
            "c4ac98e1-c54f-4bab-83b3-61ec0c8e041a",
            "321fbad2-5410-42b3-809e-483891fdc8e4",
            "ed603df1-7dfa-4a4b-95f2-79ee502d36c3",
            "fcc3266d-7322-4291-9ff2-c5153500f4ed",
            "0c08fbae-d0cd-43a8-960c-8b3703a8d455",
            "a37b7e09-f91c-42aa-9e79-47a36a8b3947",
            "f61cd9fc-aad0-40e6-a706-d70034310b17",
            "32a70c55-dca1-42e0-ace7-eebed999db03",
            "a7506d5c-f936-49e1-bb22-105e7f4c6123",
            "ffee9e71-bd4b-426b-9f4c-64304ded2a83",
            "a0e58814-9b84-46ad-93bb-293b9329ff3f",
            "13a52f48-6389-4e04-8cc6-4d8a5ceb65ec",
            "95f4b720-d36d-40b8-a22b-e6ceebc0c299"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "a5d054bc-50b5-45f7-8da5-a4fadc9ac445",
          "title": "Units Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/tests/004-unit-test.js",
          "file": "/api/tests/004-unit-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Units Endpoint\"",
              "fullTitle": "Units Endpoint \"before all\" hook in \"Units Endpoint\"",
              "timedOut": false,
              "duration": 431,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAccessToken(authData);\n//console.log(response);\nassert(response.status).to.equal(201);\naccessToken = response.body.data;\n//console.log(accessToken);",
              "err": {},
              "uuid": "ed80c5d0-490a-40bd-9ae1-6a62149dd0ac",
              "parentUUID": "a5d054bc-50b5-45f7-8da5-a4fadc9ac445",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "@unit As a User, I want to create a new unit with valid data",
              "fullTitle": "Units Endpoint @unit As a User, I want to create a new unit with valid data",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await addUnit(accessToken.accessToken, unitData);\n//console.log(response.body.data);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"status\", \"message\", \"data\"]);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Unit berhasil ditambahkan');\n//take some response data and show the data\nunitId = response.body.data.unitId;\n//console.log(unitId);",
              "err": {},
              "uuid": "15cf8de6-557e-4c6b-9fa3-3e916ab88a07",
              "parentUUID": "a5d054bc-50b5-45f7-8da5-a4fadc9ac445",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I want to get all units",
              "fullTitle": "Units Endpoint @unit As a User, I want to get all units",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getUnits(accessToken.accessToken);\nassert(response.status).to.equal(200);\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "d1a21bf0-ab26-47de-823f-6aca69da3b64",
              "parentUUID": "a5d054bc-50b5-45f7-8da5-a4fadc9ac445",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I want to get a unit by id",
              "fullTitle": "Units Endpoint @unit As a User, I want to get a unit by id",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getUnitById(accessToken.accessToken, unitId);\n//console.log(response.body.data);\nassert(response.status).to.equal(200);\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "cf70ef62-991c-47c2-92aa-4bf0bae60738",
              "parentUUID": "a5d054bc-50b5-45f7-8da5-a4fadc9ac445",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I want to update a unit with valid data",
              "fullTitle": "Units Endpoint @unit As a User, I want to update a unit with valid data",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nunitData.name = faker.word.noun();\nconst response = await updateUnit(accessToken.accessToken, unitId, unitData);\nassert(response.status).to.equal(200);\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "bfe93187-27ff-45ee-bb7a-51d436714788",
              "parentUUID": "a5d054bc-50b5-45f7-8da5-a4fadc9ac445",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@unit As a User, I want to delete a unit",
              "fullTitle": "Units Endpoint @unit As a User, I want to delete a unit",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await deleteUnit(accessToken.accessToken, unitId);\nassert(response.status).to.equal(200);\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "3791e104-f93c-4819-909e-525d0db4674a",
              "parentUUID": "a5d054bc-50b5-45f7-8da5-a4fadc9ac445",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15cf8de6-557e-4c6b-9fa3-3e916ab88a07",
            "d1a21bf0-ab26-47de-823f-6aca69da3b64",
            "cf70ef62-991c-47c2-92aa-4bf0bae60738",
            "bfe93187-27ff-45ee-bb7a-51d436714788",
            "3791e104-f93c-4819-909e-525d0db4674a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 386,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "6.2.0"
    }
  }
}