{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-26T14:46:09.822Z",
    "end": "2023-12-26T14:46:11.218Z",
    "duration": 1396,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f6dd0fef-3468-4a56-8d61-c660a4dd0e99",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6622502b-11cf-4e5a-b616-bd23ef08328c",
          "title": "User registration",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/001-registration-test.js",
          "file": "/api/test/001-registration-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@post As a User, I want to be able to register",
              "fullTitle": "User registration @post As a User, I want to be able to register",
              "timedOut": false,
              "duration": 520,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = faker.person.fullName();\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedRegistrationKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Toko berhasil didaftarkan');\n//take some response data and show the data\ntokoName = response.body.data.name;\n//console.log(tokoName);",
              "err": {},
              "uuid": "afcca679-7b57-4a9a-b681-2430cd533fac",
              "parentUUID": "6622502b-11cf-4e5a-b616-bd23ef08328c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I register with invalid data",
              "fullTitle": "User registration @post As a User, I should got an error message when I register with invalid data",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = (\"\");\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"name\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "a47afd98-c21a-4beb-9b05-cecb8fc62911",
              "parentUUID": "6622502b-11cf-4e5a-b616-bd23ef08328c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "afcca679-7b57-4a9a-b681-2430cd533fac",
            "a47afd98-c21a-4beb-9b05-cecb8fc62911"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 588,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "c2268fed-4f2f-4760-b56b-38fc23a7053c",
          "title": "User login",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/002-auth-test.js",
          "file": "/api/test/002-auth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@post As a User, I want to be able to login with valid data",
              "fullTitle": "User login @post As a User, I want to be able to login with valid data",
              "timedOut": false,
              "duration": 409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedAuthKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Authentication berhasil ditambahkan');\n//take some response data and show the data\naccessToken = response.body.data.accessToken;\n//console.log(accessToken);",
              "err": {},
              "uuid": "dffbb1f5-8911-4704-a394-a025cff1eae2",
              "parentUUID": "c2268fed-4f2f-4760-b56b-38fc23a7053c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with invalid credential",
              "fullTitle": "User login @post As a User, I should got an error message when I login with invalid credential",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "08feba62-6082-4ee2-a6b1-5b63a05258f4",
              "parentUUID": "c2268fed-4f2f-4760-b56b-38fc23a7053c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with invalid email",
              "fullTitle": "User login @post As a User, I should got an error message when I login with invalid email",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"abc\");\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "2f06a0a5-eba0-4c1f-8f23-47f6ce61f50c",
              "parentUUID": "c2268fed-4f2f-4760-b56b-38fc23a7053c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with invalid password",
              "fullTitle": "User login @post As a User, I should got an error message when I login with invalid password",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "d31f3e17-999c-422f-957b-8ef2e768d11a",
              "parentUUID": "c2268fed-4f2f-4760-b56b-38fc23a7053c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with an empty email",
              "fullTitle": "User login @post As a User, I should got an error message when I login with an empty email",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "f40fbdbb-c1fb-4fd0-9347-d7e44336944c",
              "parentUUID": "c2268fed-4f2f-4760-b56b-38fc23a7053c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with an empty password",
              "fullTitle": "User login @post As a User, I should got an error message when I login with an empty password",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "c44dee09-c2fb-4010-8b71-3819fd288d92",
              "parentUUID": "c2268fed-4f2f-4760-b56b-38fc23a7053c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dffbb1f5-8911-4704-a394-a025cff1eae2",
            "08feba62-6082-4ee2-a6b1-5b63a05258f4",
            "2f06a0a5-eba0-4c1f-8f23-47f6ce61f50c",
            "d31f3e17-999c-422f-957b-8ef2e768d11a",
            "f40fbdbb-c1fb-4fd0-9347-d7e44336944c",
            "c44dee09-c2fb-4010-8b71-3819fd288d92"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 796,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "6.2.0"
    }
  }
}