{
  "stats": {
    "suites": 1,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-28T08:17:51.740Z",
    "end": "2023-12-28T08:17:54.042Z",
    "duration": 2302,
    "testsRegistered": 23,
    "passPercent": 65.21739130434783,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 8,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "da915b88-698f-4997-8d4f-74d4578eac25",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "55422e1a-fcc3-4348-b597-f79d2349f302",
          "title": "User Registration Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/001-registration-test.js",
          "file": "/api/test/001-registration-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@register As a User, I want to be able to register",
              "fullTitle": "User Registration Endpoint @register As a User, I want to be able to register",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = faker.person.fullName();\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedRegistrationKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Toko berhasil didaftarkan');\n//take some response data and show the data\ntokoName = response.body.data.name;\n//console.log(tokoName);",
              "err": {},
              "uuid": "5df0d57d-d6f9-4fd1-8f47-6d15fb1ed6fd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@register As a User, I should got an error message when I register with invalid data",
              "fullTitle": "User Registration Endpoint @register As a User, I should got an error message when I register with invalid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = (\"\");\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"name\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "1ca75fd2-b723-4191-a7df-227c7f01b37b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "5df0d57d-d6f9-4fd1-8f47-6d15fb1ed6fd",
            "1ca75fd2-b723-4191-a7df-227c7f01b37b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "014d3aa5-b60a-4504-ad28-237aea07bcd6",
          "title": "Authentication Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/002-auth-test.js",
          "file": "/api/test/002-auth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@auth As a User, I want to be able to login with valid data",
              "fullTitle": "Authentication Endpoint @auth As a User, I want to be able to login with valid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedAuthKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Authentication berhasil ditambahkan');\n//take some response data and show the data\naccessToken = response.body.data.accessToken;\n//console.log(accessToken);",
              "err": {},
              "uuid": "6bdc18de-c7f6-42d2-a932-d39ec6169dbb",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid credential",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid credential",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "4f334c6e-0ba6-4e8f-96a2-dffbc8b0df94",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid email",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"abc\");\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "07a7d941-bb58-40f9-b0eb-5f7e7477ede8",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid password",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "9833aff4-c548-4247-bcc7-96f0ce6137d5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with an empty email",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with an empty email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "ae34be58-8f3a-4c73-af53-0d89239d0703",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with an empty password",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with an empty password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "75fd0313-4930-440c-9cb3-c30e5a4adf28",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6bdc18de-c7f6-42d2-a932-d39ec6169dbb",
            "4f334c6e-0ba6-4e8f-96a2-dffbc8b0df94",
            "07a7d941-bb58-40f9-b0eb-5f7e7477ede8",
            "9833aff4-c548-4247-bcc7-96f0ce6137d5",
            "ae34be58-8f3a-4c73-af53-0d89239d0703",
            "75fd0313-4930-440c-9cb3-c30e5a4adf28"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
          "title": "Users Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/003-user-test.js",
          "file": "/api/test/003-user-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Users Endpoint\"",
              "fullTitle": "Users Endpoint \"before all\" hook in \"Users Endpoint\"",
              "timedOut": false,
              "duration": 490,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAccessToken(authData);\n//console.log(response);\nassert(response.status).to.equal(201);\naccessToken = response.body.data;\n       //console.log(accessToken);",
              "err": {},
              "uuid": "b841770f-b5c8-4eff-92cd-72655ad32c0d",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "@user undefined",
              "fullTitle": "Users Endpoint @user undefined",
              "timedOut": false,
              "duration": 402,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUser);\nassert(response.status).to.equal(201);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\", \"message\"]);\nassert(response.body.data).to.be.an('object');\nuserId = response.body.data;",
              "err": {},
              "uuid": "811dce2a-d6eb-4b1e-b18c-977a3f249f81",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to get all users",
              "fullTitle": "Users Endpoint @user As a User, I want to get all users",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAllUser(accessToken.accessToken);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "d24a2bf5-c8dd-4625-ac00-1506be82522e",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to get users by user id",
              "fullTitle": "Users Endpoint @user As a User, I want to get users by user id",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId.userId);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "a75d08dd-64e4-4f2f-b56a-f932e35ab053",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to add new user with valid data",
              "fullTitle": "Users Endpoint @user As a User, I want to add new user with valid data",
              "timedOut": false,
              "duration": 432,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUser);\nassert(response.status).to.equal(201);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\", \"message\"]);\nassert(response.body.data).to.be.an('object');\nuserId = response.body.data;",
              "err": {},
              "uuid": "55f89d05-6b31-4165-a98c-84a113de0f02",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid token",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken + '1', newUser);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "f6855294-198f-4430-9c9a-c9652b35ffb9",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid email",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUserInvalidEmail);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "cbea1271-c2a7-4cff-88e5-b9735559f494",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid email",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "newUser.email = (\"\");\nconst response = await addUser(accessToken.accessToken, newUser);\n//console.log(response);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "68a9c353-bfaf-4638-b904-0f126fa9e488",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I add new user with empty password",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with empty password",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUserEmptyPassword);\n//console.log(response);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "37040dc5-47f5-4e29-8769-71f1c024595d",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to update my data with valid data",
              "fullTitle": "Users Endpoint @user As a User, I want to update my data with valid data",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.name = faker.person.firstName();\nuserData.email = faker.internet.email();\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"message\", \"data\"]);\nassert(response.body.data).to.be.an('object');\n//console.log(response.body);",
              "err": {},
              "uuid": "c2f6fa6a-ef93-46c7-9949-f509d9969122",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I get user with invalid token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with invalid token",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken + '1', userId.userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "ae8a6c6f-6f35-4056-ab45-0f002f41f677",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I get user with empty token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with empty token",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById('', userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Bad HTTP authentication header format');",
              "err": {},
              "uuid": "4958c113-8d79-44af-b486-b9c2952f9b97",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I get user with invalid user id",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with invalid user id",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId.userId + '1');\nassert(response.status).to.equal(404);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('id tidak valid');",
              "err": {},
              "uuid": "b0735cd4-0b40-4d2e-976f-79df484aec94",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with empty email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with empty email",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.email = (\"\");\nconst response = await updateUser(accessToken.accessToken, userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"email\" is not allowed to be empty');",
              "err": {},
              "uuid": "1844d198-1716-4682-b9c1-31d8a662c253",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with invalid email",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.email = (\"aaa\");\nconst response = await updateUser(accessToken.accessToken, userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"email\" must be a valid email');",
              "err": {},
              "uuid": "96f7a580-6ad5-48ce-b847-45248f013cb3",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with empty name",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with empty name",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.name = (\"\");\nconst response = await updateUser(accessToken.accessToken, userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"name\" is not allowed to be empty');",
              "err": {},
              "uuid": "978f616b-bb09-4d35-be21-7c54e47e5764",
              "parentUUID": "11f19e63-2fc9-4df5-97f5-44fc8ad5df36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "811dce2a-d6eb-4b1e-b18c-977a3f249f81",
            "d24a2bf5-c8dd-4625-ac00-1506be82522e",
            "a75d08dd-64e4-4f2f-b56a-f932e35ab053",
            "55f89d05-6b31-4165-a98c-84a113de0f02",
            "f6855294-198f-4430-9c9a-c9652b35ffb9",
            "cbea1271-c2a7-4cff-88e5-b9735559f494",
            "68a9c353-bfaf-4638-b904-0f126fa9e488",
            "37040dc5-47f5-4e29-8769-71f1c024595d",
            "c2f6fa6a-ef93-46c7-9949-f509d9969122",
            "ae8a6c6f-6f35-4056-ab45-0f002f41f677",
            "4958c113-8d79-44af-b486-b9c2952f9b97",
            "b0735cd4-0b40-4d2e-976f-79df484aec94",
            "1844d198-1716-4682-b9c1-31d8a662c253",
            "96f7a580-6ad5-48ce-b847-45248f013cb3",
            "978f616b-bb09-4d35-be21-7c54e47e5764"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1789,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "6.2.0"
    }
  }
}