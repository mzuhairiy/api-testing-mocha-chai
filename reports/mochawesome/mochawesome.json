{
  "stats": {
    "suites": 1,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-28T09:17:53.492Z",
    "end": "2023-12-28T09:17:55.983Z",
    "duration": 2491,
    "testsRegistered": 24,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 8,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "2df3bbb9-561d-4cc8-9d82-4772e136492a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3bdc13a9-0d4c-48f8-9589-0b415c559732",
          "title": "User Registration Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/001-registration-test.js",
          "file": "/api/test/001-registration-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@register As a User, I want to be able to register",
              "fullTitle": "User Registration Endpoint @register As a User, I want to be able to register",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = faker.person.fullName();\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedRegistrationKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Toko berhasil didaftarkan');\n//take some response data and show the data\ntokoName = response.body.data.name;\n//console.log(tokoName);",
              "err": {},
              "uuid": "2ef43f7a-7ef5-4216-bbf4-a750842eaf31",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@register As a User, I should got an error message when I register with invalid data",
              "fullTitle": "User Registration Endpoint @register As a User, I should got an error message when I register with invalid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = (\"\");\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"name\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "6d472334-814d-43bd-bdc4-b7a7e95d898e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "2ef43f7a-7ef5-4216-bbf4-a750842eaf31",
            "6d472334-814d-43bd-bdc4-b7a7e95d898e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "c3ca0324-4380-4452-9988-33e0598cabd6",
          "title": "Authentication Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/002-auth-test.js",
          "file": "/api/test/002-auth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@auth As a User, I want to be able to login with valid data",
              "fullTitle": "Authentication Endpoint @auth As a User, I want to be able to login with valid data",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedAuthKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Authentication berhasil ditambahkan');\n//take some response data and show the data\naccessToken = response.body.data.accessToken;\n//console.log(accessToken);",
              "err": {},
              "uuid": "83f7f90f-fa7a-468c-ae77-eed7cba5a5ad",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid credential",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid credential",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "6055f1d0-24eb-42e0-99ec-05028123c3f9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid email",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"abc\");\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "a122ab05-f8b8-469d-921b-8839cc4e9c3d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with invalid password",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with invalid password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "c401acc5-186c-45c9-932d-6d7fb8ff7834",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with an empty email",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with an empty email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "4272bc5b-9610-4462-9a33-7a427a135a20",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "@auth As a User, I should got an error message when I login with an empty password",
              "fullTitle": "Authentication Endpoint @auth As a User, I should got an error message when I login with an empty password",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "0306a408-fd7b-4d68-9331-4f8ce84dfcc7",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "83f7f90f-fa7a-468c-ae77-eed7cba5a5ad",
            "6055f1d0-24eb-42e0-99ec-05028123c3f9",
            "a122ab05-f8b8-469d-921b-8839cc4e9c3d",
            "c401acc5-186c-45c9-932d-6d7fb8ff7834",
            "4272bc5b-9610-4462-9a33-7a427a135a20",
            "0306a408-fd7b-4d68-9331-4f8ce84dfcc7"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
          "title": "Users Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/003-user-test.js",
          "file": "/api/test/003-user-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Users Endpoint\"",
              "fullTitle": "Users Endpoint \"before all\" hook in \"Users Endpoint\"",
              "timedOut": false,
              "duration": 484,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAccessToken(authData);\n//console.log(response);\nassert(response.status).to.equal(201);\naccessToken = response.body.data;\n       //console.log(accessToken);",
              "err": {},
              "uuid": "0afe8814-9296-4513-b8f2-8f34c818dbc9",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "@user undefined",
              "fullTitle": "Users Endpoint @user undefined",
              "timedOut": false,
              "duration": 499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUser);\nassert(response.status).to.equal(201);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\", \"message\"]);\nassert(response.body.data).to.be.an('object');\nuserId = response.body.data;",
              "err": {},
              "uuid": "4ac86e2e-0e3a-448b-a083-72ffd85ac088",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to get all users",
              "fullTitle": "Users Endpoint @user As a User, I want to get all users",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAllUser(accessToken.accessToken);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "1654e264-b234-4124-9cf0-15fbda1ac452",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to get users by user id",
              "fullTitle": "Users Endpoint @user As a User, I want to get users by user id",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId.userId);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "ef27d776-44a2-4105-ae10-1610f7d93180",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to add new user with valid data",
              "fullTitle": "Users Endpoint @user As a User, I want to add new user with valid data",
              "timedOut": false,
              "duration": 430,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUser);\nassert(response.status).to.equal(201);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\", \"message\"]);\nassert(response.body.data).to.be.an('object');\nuserId = response.body.data;",
              "err": {},
              "uuid": "2675dd59-fadc-4e00-828a-2272734872b7",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid token",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken + '1', newUser);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "e19a18a3-6e22-4728-8b5d-39cc8e3ec41a",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid email",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUserInvalidEmail);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "e47b1d9e-7b15-4387-ac43-87545fbb6a5d",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I add new user with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with invalid email",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "newUser.email = (\"\");\nconst response = await addUser(accessToken.accessToken, newUser);\n//console.log(response);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "1605c133-a44a-46c0-b639-2af3d5e73f25",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I add new user with empty password",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I add new user with empty password",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await addUser(accessToken.accessToken, newUserEmptyPassword);\n//console.log(response);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "34e809e7-ca75-406a-83f7-3132c79430a3",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to update my data with valid data",
              "fullTitle": "Users Endpoint @user As a User, I want to update my data with valid data",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.name = faker.person.firstName();\nuserData.email = faker.internet.email();\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"message\", \"data\"]);\nassert(response.body.data).to.be.an('object');\n//console.log(response.body);",
              "err": {},
              "uuid": "b28b7c69-a03c-4029-b8b4-bc48f02633c4",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I get user with invalid token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with invalid token",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken + '1', userId.userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "f26fd997-f755-40ba-adf1-b6b3fc2fc245",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I get user with empty token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with empty token",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById('', userId.userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Bad HTTP authentication header format');",
              "err": {},
              "uuid": "7d6a069c-56ae-4473-aafb-8ca25a57d065",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I get user with invalid user id",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I get user with invalid user id",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId.userId + '1');\nassert(response.status).to.equal(404);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('id tidak valid');",
              "err": {},
              "uuid": "d79fa20a-252c-4b15-a6d2-c03db3ec302f",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with empty email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with empty email",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.email = (\"\");\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"email\" is not allowed to be empty');",
              "err": {},
              "uuid": "edd657ba-aa3f-4162-ae1b-6c68bbf5c631",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with invalid email",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with invalid email",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.email = (\"aaa\");\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"email\" must be a valid email');",
              "err": {},
              "uuid": "49d5c236-98f2-4b71-b5a4-9b6da5f324e6",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I updated my data with empty name",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I updated my data with empty name",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData.name = (\"\");\nconst response = await updateUser(accessToken.accessToken, userId.userId, userData);\nassert(response.status).to.equal(400);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\"name\" is not allowed to be empty');",
              "err": {},
              "uuid": "5dbfc7bb-30b1-48c5-940f-f72fdc43e8b6",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a System, I want to delete a user",
              "fullTitle": "Users Endpoint @user As a System, I want to delete a user",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await deleteUser(accessToken.accessToken, userId.userId);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"message\"]);\nassert(response.body.message).to.equal('User berhasil dihapus')",
              "err": {},
              "uuid": "d6102300-65af-4d76-8eb5-b7b4d06d5e90",
              "parentUUID": "511cc1f9-199a-4bfc-b318-36a6895ec06d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4ac86e2e-0e3a-448b-a083-72ffd85ac088",
            "1654e264-b234-4124-9cf0-15fbda1ac452",
            "ef27d776-44a2-4105-ae10-1610f7d93180",
            "2675dd59-fadc-4e00-828a-2272734872b7",
            "e19a18a3-6e22-4728-8b5d-39cc8e3ec41a",
            "e47b1d9e-7b15-4387-ac43-87545fbb6a5d",
            "1605c133-a44a-46c0-b639-2af3d5e73f25",
            "34e809e7-ca75-406a-83f7-3132c79430a3",
            "b28b7c69-a03c-4029-b8b4-bc48f02633c4",
            "f26fd997-f755-40ba-adf1-b6b3fc2fc245",
            "7d6a069c-56ae-4473-aafb-8ca25a57d065",
            "d79fa20a-252c-4b15-a6d2-c03db3ec302f",
            "edd657ba-aa3f-4162-ae1b-6c68bbf5c631",
            "49d5c236-98f2-4b71-b5a4-9b6da5f324e6",
            "5dbfc7bb-30b1-48c5-940f-f72fdc43e8b6",
            "d6102300-65af-4d76-8eb5-b7b4d06d5e90"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1980,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "6.2.0"
    }
  }
}