{
  "stats": {
    "suites": 3,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-27T15:27:22.296Z",
    "end": "2023-12-27T15:27:24.582Z",
    "duration": 2286,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "448729db-2936-4f03-a259-d118b12b71d8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9c879bca-dfdb-4956-801b-7e7cfe7f5bff",
          "title": "User Registration Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/001-registration-test.js",
          "file": "/api/test/001-registration-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@post As a User, I want to be able to register",
              "fullTitle": "User Registration Endpoint @post As a User, I want to be able to register",
              "timedOut": false,
              "duration": 512,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = faker.person.fullName();\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedRegistrationKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Toko berhasil didaftarkan');\n//take some response data and show the data\ntokoName = response.body.data.name;\n//console.log(tokoName);",
              "err": {},
              "uuid": "3f7e323f-80c1-4af0-bcca-821b69a9b8c4",
              "parentUUID": "9c879bca-dfdb-4956-801b-7e7cfe7f5bff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I register with invalid data",
              "fullTitle": "User Registration Endpoint @post As a User, I should got an error message when I register with invalid data",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose registration request data\nregistrationData.name = (\"\");\nregistrationData.email = faker.internet.email();\nregistrationData.password = faker.internet.password();\n//hit api and check\nconst response = await userRegistration(registrationData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"name\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "4d0e29c0-24b2-4e86-a650-5fae4ab7a9ef",
              "parentUUID": "9c879bca-dfdb-4956-801b-7e7cfe7f5bff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f7e323f-80c1-4af0-bcca-821b69a9b8c4",
            "4d0e29c0-24b2-4e86-a650-5fae4ab7a9ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 584,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "99c9f259-4fbd-44b7-8160-b3e015f497b6",
          "title": "Authentication Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/002-auth-test.js",
          "file": "/api/test/002-auth-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@post As a User, I want to be able to login with valid data",
              "fullTitle": "Authentication Endpoint @post As a User, I want to be able to login with valid data",
              "timedOut": false,
              "duration": 409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(201);\nassert(response.body).to.have.keys([\"message\", \"status\", \"data\"]);\nassert(response.body).to.have.keys(expectedAuthKeys);\nassert(response.body.status).to.equal('success');\nassert(response.body.message).to.equal('Authentication berhasil ditambahkan');\n//take some response data and show the data\naccessToken = response.body.data.accessToken;\n//console.log(accessToken);",
              "err": {},
              "uuid": "2b60165b-d9af-42bc-b492-96dcf9b6a1dc",
              "parentUUID": "99c9f259-4fbd-44b7-8160-b3e015f497b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with invalid credential",
              "fullTitle": "Authentication Endpoint @post As a User, I should got an error message when I login with invalid credential",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "416973bc-b995-446e-ad35-d069fe37f5c3",
              "parentUUID": "99c9f259-4fbd-44b7-8160-b3e015f497b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with invalid email",
              "fullTitle": "Authentication Endpoint @post As a User, I should got an error message when I login with invalid email",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"abc\");\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" must be a valid email');",
              "err": {},
              "uuid": "5f650a5a-042d-49e4-9f7a-2f87cc4c9c8b",
              "parentUUID": "99c9f259-4fbd-44b7-8160-b3e015f497b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with invalid password",
              "fullTitle": "Authentication Endpoint @post As a User, I should got an error message when I login with invalid password",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = faker.internet.password();\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(401);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('Kredensial yang Anda berikan salah');",
              "err": {},
              "uuid": "be38b0ac-3817-4c82-bfd5-c2eec6735a96",
              "parentUUID": "99c9f259-4fbd-44b7-8160-b3e015f497b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with an empty email",
              "fullTitle": "Authentication Endpoint @post As a User, I should got an error message when I login with an empty email",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"email\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "1bb1c2fe-9276-4611-a090-49720250c199",
              "parentUUID": "99c9f259-4fbd-44b7-8160-b3e015f497b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@post As a User, I should got an error message when I login with an empty password",
              "fullTitle": "Authentication Endpoint @post As a User, I should got an error message when I login with an empty password",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//compose request data\nauthData.email = faker.internet.email();\nauthData.password = (\"\");\n//hit api and check\nconst response = await getAccessToken(authData);\nassert(response.status).to.equal(400);\nassert(response.body).to.have.keys([\"message\", \"status\"]);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('\\\"password\\\" is not allowed to be empty');",
              "err": {},
              "uuid": "08b5115d-7364-4651-a2f8-d65399920262",
              "parentUUID": "99c9f259-4fbd-44b7-8160-b3e015f497b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b60165b-d9af-42bc-b492-96dcf9b6a1dc",
            "416973bc-b995-446e-ad35-d069fe37f5c3",
            "5f650a5a-042d-49e4-9f7a-2f87cc4c9c8b",
            "be38b0ac-3817-4c82-bfd5-c2eec6735a96",
            "1bb1c2fe-9276-4611-a090-49720250c199",
            "08b5115d-7364-4651-a2f8-d65399920262"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 782,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "cec720f1-163c-41ff-8cc0-d2625f70b19f",
          "title": "Users Endpoint",
          "fullFile": "/Users/mz/Scripts/api-testing-kasiraja/api/test/003-user-test.js",
          "file": "/api/test/003-user-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Users Endpoint\"",
              "fullTitle": "Users Endpoint \"before all\" hook in \"Users Endpoint\"",
              "timedOut": false,
              "duration": 459,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAccessToken(authData);\n//console.log(response);\nassert(response.status).to.equal(201);\naccessToken = response.body.data;\n       //console.log(accessToken);",
              "err": {},
              "uuid": "aa5630a8-b9f4-487c-af81-9ac8282b19d4",
              "parentUUID": "cec720f1-163c-41ff-8cc0-d2625f70b19f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "@user As a User, I want to get all users",
              "fullTitle": "Users Endpoint @user As a User, I want to get all users",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getAllUser(accessToken.accessToken);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "c462af43-f821-4a35-9302-4150c3f6eb52",
              "parentUUID": "cec720f1-163c-41ff-8cc0-d2625f70b19f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to get users by user id",
              "fullTitle": "Users Endpoint @user As a User, I want to get users by user id",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"data\"]);\nassert(response.body.data).to.be.an('object');",
              "err": {},
              "uuid": "69681f5b-b59e-4c91-bd70-be7a4b117b09",
              "parentUUID": "cec720f1-163c-41ff-8cc0-d2625f70b19f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I send request with invalid token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I send request with invalid token",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken + '1', userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Invalid token signature');",
              "err": {},
              "uuid": "3baf689a-57fc-42d5-894a-bbc505e84631",
              "parentUUID": "cec720f1-163c-41ff-8cc0-d2625f70b19f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I send request with empty token",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I send request with empty token",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById('', userId);\nassert(response.status).to.equal(401);\nassert(response.body.error).to.equal('Unauthorized');\nassert(response.body.message).to.equal('Bad HTTP authentication header format');",
              "err": {},
              "uuid": "f859d29e-aabb-450d-abe4-c01aed3eeeaf",
              "parentUUID": "cec720f1-163c-41ff-8cc0-d2625f70b19f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I should got an error when I send request with invalid user id",
              "fullTitle": "Users Endpoint @user As a User, I should got an error when I send request with invalid user id",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUserById(accessToken.accessToken, userId + '1');\nassert(response.status).to.equal(404);\nassert(response.body.status).to.equal('fail');\nassert(response.body.message).to.equal('id tidak valid');",
              "err": {},
              "uuid": "c369da44-1250-4f79-9b84-67a14512c93d",
              "parentUUID": "cec720f1-163c-41ff-8cc0-d2625f70b19f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@user As a User, I want to update my data with valid data",
              "fullTitle": "Users Endpoint @user As a User, I want to update my data with valid data",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await updateUser(accessToken.accessToken, userId, userData);\nassert(response.status).to.equal(200);\nassert(response.body.status).to.equal('success');\nassert(response.body).to.have.keys([\"status\", \"message\", \"data\"]);\nassert(response.body.data).to.be.an('object');\n//console.log(response.body);",
              "err": {},
              "uuid": "603d8bdd-ab96-42bf-9cc5-2cb470f5fc18",
              "parentUUID": "cec720f1-163c-41ff-8cc0-d2625f70b19f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c462af43-f821-4a35-9302-4150c3f6eb52",
            "69681f5b-b59e-4c91-bd70-be7a4b117b09",
            "3baf689a-57fc-42d5-894a-bbc505e84631",
            "f859d29e-aabb-450d-abe4-c01aed3eeeaf",
            "c369da44-1250-4f79-9b84-67a14512c93d",
            "603d8bdd-ab96-42bf-9cc5-2cb470f5fc18"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 445,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "6.2.0"
    }
  }
}